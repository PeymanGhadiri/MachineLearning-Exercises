function [theta, J_history] = gradientDescent(X, y, theta, alpha, num_iters)
%GRADIENTDESCENT Performs gradient descent to learn theta
%   theta = GRADIENTDESENT(X, y, theta, alpha, num_iters) updates theta by 
%   taking num_iters gradient steps with learning rate alpha

% Initialize some useful values
m = length(y); % number of training examples
J_history = zeros(num_iters, 1);

for iter = 1:num_iters

    % ====================== YOUR CODE HERE ======================
    % Instructions: Perform a single gradient step on the parameter vector
    %               theta. 
    %
    % Hint: While debugging, it can be useful to print out the values
    %       of the cost function (computeCost) and gradient here.
    %
    
    sigma0=0;
    sigma1=1;
    
    for j=1:m
      hx=X(j,:)*theta';
      sigma0=sigma0+(hx-y(j));
      sigma1=sigma1+(hx-y(j))*X(j,2);
    end

    temp0= theta0-(alpha*sigma0/m);
    temp1= theta0-(alpha*sigma1/m);
        
    theta=[temp0;temp1];
    % ============================================================

    % Save the cost J in every iteration    
    J_history(iter) = computeCost(X, y, theta);

end

end
